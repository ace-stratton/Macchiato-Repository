{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>DISCLAIMER</p> <p>INFORMATION CONTAINED IN THIS DOCUMENTATION IS CONFIDENTIAL IN NATURE AND IS SUBJECT TO THE NON-DISCLOSURE AGREEMENT BETWEEN ENDUROSAT AND THE INSTITUTION IT WAS SENT TO. IT IS INTENDED SOLELY FOR THE ENTITY/INSTITUTION TO WHICH IT WAS SENT PERSUANT TO THIS NDA AND SHOULD NOT BE DISSEMINATED, COPIED OR REPRODUCED FOR EXTERNAL INSTITUTIONS WITHOUT THE PRIOR CONSENT OF ENDUROSAT.</p>"},{"location":"index.html#introduction","title":"Introduction","text":""},{"location":"index.html#what-is-macchiato","title":"What is Macchiato?","text":"<p>Macchiato is a code generation framework for the proprietary EnduroSat Function Protocol (FP). This protocol is the backbone  of the inter-module communication in all our CubeSats and is also an important part of the EnduroSat Protocol Stack (ESPS I).</p> <p>Macchiato is able to generate protocol serialization/deserialization routines for several popular languages to eliminate hurdle with the  commands implementation so that developers and testers can focus on ther functional requirements and not on infrastructure implementation.</p> <p>Here is a list of bindings that we currently support:</p> Language Notes C Client/server protocol routines for direct integration with the ESPS I used in our CubeSat modules Python Dedicated API modules to enable fully automated testing of the CubeSat JavaScript Dedicated modules for integration with EnduroSat Digital Ground Station, providing out-of-the-box command execution and reporting for developers, testers and mission operators <p>Tip</p> <p>Excited? Go straight to the Quick start page.</p> <p>For a detailed explanation on how the code generation works, jump to the Code Generation section.</p>"},{"location":"index.html#under-the-hood","title":"Under the hood","text":"<p>At its core, Macchiato relies on Franca1 to describe the satellite module commands in the form of a simple API. Seeing the CubeSat comprising modules as a group of components with clearly defined SW interfaces opens up to a very flexible model of integrating services in the CubeSat.</p> <p>Macchiato requires the following user inputs before it can produce any code for you:</p> <ul> <li>Interfaces: comprise methods and data types described in one or more FIDL files;</li> <li>Deployment Specification: defines specific interface customization attributes acting as templates to be tuned by the users in order to affect the produced output;</li> <li>Deployment Model: a recipe on how to combine the previous two artifacts to finally produce the generated code.</li> </ul> <p>Here is the typical Franca IDL workflow:</p> <p></p> <ol> <li> <p>Eclipse Franca is a flexible framework for the definition and transformation of software interfaces.\u00a0\u21a9</p> </li> </ol>"},{"location":"change_history.html","title":"Change history","text":"Date Revision Modified By Change description 18/10/2021 0.1 SW Platform Team Draft 24/11/2021 1.0 SW Platform Team Initial version 10/12/2021 1.1 SW Platform Team Instructions for unpacking and use macchiato 22/02/2022 1.2.0 SW Platform Team Update Interface models examples 14/04/2022 1.2.1 SW Platform Team Automerge (Macchiato v1.0.9) 20/09/2022 1.2.2 SW Platform Team Updates for Macchiato v1.0.17 07/10/2022 1.2.3 SW Platform Team Updates for Macchiato v1.0.18 07/10/2022 1.2.4 SW Platform Team Add info about the size tag in the description of the fidl fields 07/10/2022 1.2.5 SW Platform Team Updates for Macchiato v1.0.19"},{"location":"contacts.html","title":"Contacts","text":"<p> If you need assistance with the topics described in this documentation, have questions or just want to provide some feedback, do not hesitate to reach out to our technical support team.</p>"},{"location":"faq.html","title":"Frequently Asked Questions","text":"<p>You can find an example for some specifications, interface and deployment definitions in the Models section of the User Guide.</p>"},{"location":"faq.html#how-can-i-generate-code-for-my-own-interfaces","title":"How can I generate code for my own interfaces?","text":"<p>Simple! Just describe your interface in a FIDL file and modify the deployment model.</p> <p>Example</p> <p>If the interface, <code>MyInterface</code>, is described in the file <code>MyInterface.fidl</code>, you can create a deployment model like this:</p> <pre><code>package org.endurosat.deploy\n\n// import the deployment specification\nimport \"../spec/BasicSpec.fdepl\"\n\n// import the actual Franca interfaces we want to deploy\nimport \"MyInterface.fidl\"\n\ndefine org.endurosat.spec.BasicSpec for interface MyInterface { IsClient = true }\n</code></pre> <p>Then, run Macchiato to produce your source files.</p>"},{"location":"faq.html#i-see-some-execution-errors-when-running-macchiatojar-what-does-it-mean","title":"I see some execution errors when running macchiato.jar, what does it mean?","text":"<p>We recomend to modify the interface models (FIDL files) using the Eclipse IDE. You can see how in the section Eclipse IDE setup. This way all syntax errors will be detected visually in the editor without having to cope with the low-level error messages produced by the console generator.</p> <p>If the IDE doesn't show any syntax errors in your FIDL files and you still get errors, you should check the deployment file. If the problem persists, contact our support team.</p> <p>Note</p> <p>Sometimes the IDE does not show errors in the path of the <code>import</code> statement. So pay special attantion to it.</p> <p>Also, pay attention to include the interface <code>package</code> name in the <code>define</code> statement.</p>"},{"location":"faq.html#how-can-i-make-changes-to-the-generated-output-code-or-add-specific-attributes-to-the-deployment-specification","title":"How can I make changes to the generated output code or add specific attributes to the deployment specification?","text":"<p>Changes in the deployment specifications or in the generated output code require modifications to the Macchiato code generators. If you need such customizations, you can contact us and we will be happy to discuss how we can support you.</p>"},{"location":"faq.html#your-question-is-not-listed-here","title":"Your question is not listed here?","text":"<p>Do not hesitate to reach out.</p>"},{"location":"quickstart.html","title":"Quick start","text":"<p>You should have received with your machiato release, a compressed folder containing the installer for the eclipse IDE used to develop Macchiato and another compressed file containing the necessary files to run Macchiato. The file's name should include the version of Macchiato it contains.</p> <p>Once you extract the 'macchiato_x.y.z.zip' (where x.y.z is the version), you will find the following folder structure:</p> Folder / File Description <code>docs</code> Macchiato User Guide in html format <code>open_docs.bat</code> Script for Windows to open the html documetation <code>jre</code> Java Runtime Environment for Windows (Linux/Mac users can use their own JRE but we have currently not tested executing Macchiato under non-Windows environment) <code>models</code> A folder containing the description of the Franca interfaces, the specifications and the deployment models <code>macchiatto.jar</code> Macchiato's executable Java archive <code>start_gen.bat</code> An example Script for Windows to start the code generator"},{"location":"quickstart.html#for-console-lovers","title":"For console lovers...","text":"<p>As a quick test, just run <code>start_gen.bat</code> coming pre-packaged with Macchiato. It works out of the box and performs a default code generation as specified in the deployment model available in the  <code>models</code> folder.</p> <p>For more information about how to specify what to generate, please refer to the section Code Generation.</p>"},{"location":"guide/code_generation.html","title":"Code Generation","text":""},{"location":"guide/code_generation.html#esps-function-protocol","title":"ESPS Function Protocol","text":"<p>At present, Macchiato provides code generators targeted to the ESPS Function Protocol so the code that Macchiato generates for the satellite modules is the implementation of the FP for the specific interfaces listed in your deployment model. In a typical system, the code lives in the FP layer as shown below:</p> Layer Description PHY Physical layer (in ESPS I case, this is UART over RS485) MAC ESPS bus access driver FP Function Protocol layer APP User applications"},{"location":"guide/code_generation.html#franca-idl-reference","title":"Franca IDL reference","text":"<p>The Franca IDL is a domain specific language for interface definition and as such it provides many specific features. Full language reference is provided in the Macchiato package. The code generators that we implemented rely only on specific features though. Support for others may be introduced in the future. Check the tabs below to see what Franca features you can rely on to describe interfaces...</p> <p>Features</p> Data typesLanguage constructs <p>Every Franca language construct has to be supported by the Macchiato code generators in order to convert it to working source code. The current version of Macchiato supports the following Franca base types:</p> Type name Supported UInt8 Int8 UInt16 Int16 UInt32 Int32 UInt64 Int64 Integer Boolean Float Double String ByteBuffer <p>Similarly, the current version of Macchiato supports the following Franca language constructs:</p> Feature type Supported Primitive constant Complex constant TypeCollection Interface inheritance Attributes Methods Broadcasts Contracts Structured comments  (only partial support) Deployment models"},{"location":"guide/code_generation.html#macchiato-generators","title":"Macchiato generators","text":"<p>This version of Macchiato contains the following generators:</p> Generator Description C ESPS I C source code generator (client/server bindings) python ESPS I Python source code/GUI YAML generator. Python interface JS ESPS I JavaScript source code (JavaScript client API) for the SDE1 LaTex ESPS I LaTeX documentation generator DataCache DataCache module generation (C, python and fidl for ESPS) <p>You might have observed that in the following sections not all the generators are explained. This is because they are only relevant for certain uses of the EnduroSat's products. These are the LaTex and the DataCache generators.</p>"},{"location":"guide/code_generation.html#latex-generation","title":"Latex generation","text":"<p>The LaTex generator creates a reference documentation for the interfaces described in the fidl files. This can be used to generate automatic documentation based on the comments and description tags (<code>&lt;** @description: ... **&gt;</code>) that can be added in the fidl files. Something like this:</p> <pre><code>    version { major 0 minor 1 }\n\n    &lt;** @description: Comment to describe the enum type **&gt;\n    enumeration VersionVariant\n    {\n        &lt;** @description: comments in individual values **&gt;\n        DevelopmentState = 0xFF\n        &lt;** @description: comments in individual values **&gt;\n        ReleaseCandidate = 0\n        &lt;** @description: comments in individual values **&gt;\n        Release = 1\n    }\n</code></pre>"},{"location":"guide/code_generation.html#datacache-generation","title":"Datacache generation","text":"<p>The DataCache generator, generates the code in C and Python to interact with the datacache structures defined in the <code>DataCache.fidl</code> file. It also generates a fidl file that can be used with the C generator to generate the ESPS interface to gather the datacache types previously generated. This specific generator uses other files that may not be included in your Macchiato release.</p> <p>This generation will be usefull in the case you are using EnduroSat's OBC Starter Kit. If you think you need to use them, do not hesitate to reach out.</p>"},{"location":"guide/code_generation.html#eclipse-ide-setup","title":"Eclipse IDE setup","text":"<p>In case you need to create your own interfaces or to modify the deployment specifications or models, we highly recommend that you use the Eclipse IDE for Java and DSL Developers for the best possible experience. It will help you produce error-free interfaces thanks to the syntax highlighting.</p> <p>The following steps will help you to setup a new xtend project to be able to edit your interfaces and generate the code.</p>"},{"location":"guide/code_generation.html#create-a-workspace","title":"Create a workspace","text":"<p>Create a folder where you can later include the xtend project. Open Eclipse and select the folder you just created as a workspace.</p>"},{"location":"guide/code_generation.html#create-a-new-project","title":"Create a new project","text":"<p>You can create an empty project from the PackageExplorer tab (if there are no projects already in the workspace):</p> <p></p> <p>Note</p> <p>If you don't see that option, you can create a project from the menu File New Project...</p> <p>A window will pop-up. You can select Project under the General menu:</p> <p></p> <p>Give your project a name and move the files inside the Macchiato package to the folder.</p> <p>Tip</p> <p>You can just drag and drop the files in the Eclipse IDE and it will usually ask whether you want to copy the files or to link them. It is recommended to copy them.</p> <p>Important</p> <p>Once you have the files, you can try to open one of the .fidl files in the editor. Eclipse will prompt you with the option to change the project to a Xtend project type. This will keep the highlighting and the syntax checks and it will generate the intermediate files in the folder <code>src-gen</code>.</p> <p></p>"},{"location":"guide/code_generation.html#add-the-run-configuration","title":"Add the run configuration","text":"<p>Once the project has the files, you can create an external run configuration to be able to generate the code from the fidl files using the provided jre and the macchiato.jar. Select the black arrow next to the icon of the external tools, in the tools bar, to see more options. Then select External tools configuration...:</p> <p></p> <p>You can double click on Program in the left side to create a new configuration and then fill up the following information:</p> <ol> <li>Name: descriptive name for the run command</li> <li>Location: from Browse Workspace, select the java.exe file within the jre folder 2</li> <li>Working Directory: select the project directory</li> <li>Arguments: add arguments to execute the .jar file with java.exe: <code>-jar macchiato.jar --gen-c models\\org\\endurosat\\deploy\\deploy_all_default.fdepl</code></li> </ol> <p></p> <p>Once you apply your changes you can run the configuration and you should see the output in the Console view of the Eclipse IDE. For more information about the options that the macchiato.jar file admits, go to the calling macchiato.jar section.</p> <p>Tip</p> <p>If the Eclipse IDE fails to run, you can always edit and run the generation script, <code>start_gen.bat</code>, as described in the following section.</p>"},{"location":"guide/code_generation.html#generated-files-and-folders","title":"Generated files and folders","text":"Folder / File Description      src-gen xtend generated java sources      src-gen-c Macchiato generated C code      src-gen-py Macchiato generated Python code      src-gen-js Macchiato generated JavaScript code      src-gen-tex Macchiato generated LaTex documentation      src-gen-dc Macchiato generated DataCache fidls"},{"location":"guide/code_generation.html#calling-macchiatojar","title":"Calling macchiato.jar","text":"<p>Instead of using the script <code>start_gen.bat</code>, which you can always modify to fulfil your needs, you can call the generator from a command window. The command for the generation has the following structure:</p> <p>Important</p> <p>The <code>java.exe</code> called, should be the one located in the <code>jre</code> folder of Macchiato. Running Macchiato with other versions of the jre might lead to unexpected errors.</p> <pre><code>java -jar macchiato.jar GENERATOR FDEPL_FILE [--merge MERGE_FOLDER] [-v, --verbose]\n</code></pre> <ul> <li><code>&lt;GENERATOR&gt;</code>: Type of generator to use. Each generator will generate source code in a particular language (i.e. <code>--gen-c</code> is for C)</li> <li><code>&lt;FDEPL_FILE&gt;</code>: Path to the deployment file that contains the definition of the specification and the interface to be generated</li> <li><code>--merge</code>: Auto merge option to merge the user code with the new generation of the code</li> <li><code>&lt;MERGE_FOLDER&gt;</code>: Path to the folder that contains the user code to be merged</li> <li><code>-v</code> or <code>--verbose</code>: Any of these options enables debug messages that provide additional  information of the generation. It will print out every file that is generated.</li> </ul> <p>If you run <code>macchiatto.jar</code> with no arguments, you will see the usage information and a list of supported generators.</p> <pre><code>&gt; jre\\bin\\java.exe -jar macchiato.jar\n\n\n\n... EnduroSat ...\n                              __    _       __\n   ____ ___  ____ ___________/ /_  (_)___ _/ /_____\n  / __ `__ \\/ __ `/ ___/ ___/ __ \\/ / __ `/ __/ __ \\\n / / / / / / /_/ / /__/ /__/ / / / / /_/ / /_/ /_/ /\n/_/ /_/ /_/\\__,_/\\___/\\___/_/ /_/_/\\__,_/\\__/\\____/ v1.0.19\n\n\nUsage: java -jar macchiato.jar GENERATOR FDEPL_FILE [--merge MERGE_FOLDER] [-v, --verbose]\nAvailable generators:\n--gen-c: ESPSI C source code generator (client/server bindings) [v2.12]\n--gen-py: ESPSI Python source code generator (Python client API bindings) [v1.9]\n--gen-js: ESPSI JavaScript source code (JavaScript client API) [v3.2]\n--gen-tex: ESPSI LaTeX documentation generator [v1.1]\n--gen-dc: FIDL C DataCache source code generator [v0.7]\nThe output will be in the folder 'src-&lt;GENERATOR&gt;'. Old generations there will be overwritten!\n</code></pre> <p>The default file with the deployment models for the code generation is located in <code>models\\org\\endurosat\\deploy\\deploy_all_default.fdepl</code>.</p>"},{"location":"guide/code_generation.html#generated-files-and-folders_1","title":"Generated files and folders","text":"Folder / File Description      src-gen-c Macchiato generated C code      src-gen-py Macchiato generated Python code      src-gen-js Macchiato generated JavaScript code      src-gen-tex Macchiato generated LaTex documentation      src-gen-dc Macchiato generated DataCache code <p>Continue to the next sections to get more information about each of the generated outputs.</p>"},{"location":"guide/code_generation.html#merging-with-the-user-code","title":"Merging with the User Code","text":"<p>There is the possibility to merge the generated code with a previosly version and to keep the user code.</p> <p>Tip</p> <p>Always keep a copy of the code before merging. Just in case.</p> <p>Note</p> <p>This is only supported for the C Code Generator.</p> <p>You can provide the option <code>--merge</code> and the folder where the previous generation is. Macchiato will gather all the code that is between user tags. These tags usually have something like <code>@START_USER@</code> or <code>@USER_VAR_SECTION_START@</code>. Whatever is between the <code>START</code> tag and the <code>END</code> tag is going to be kept by Macchiato and added in the new generated files.</p> <p>Note</p> <p>Not all the generated files have user code tags in them. For this version of Macchiato, only the files that are <code>FP_&lt;protocol&gt;ClientApp.c</code> or <code>FP_&lt;protocol&gt;ServerApp.c</code>.</p> <p>Example of user tags:</p> <pre><code>// @START_USER@ USER_LOCAL_FUNC_DECL\n// Place static function declarations here to preserve them during merge!!!\n// @END_USER@ USER_LOCAL_FUNC_DECL\n\nor...\n\n// @USER_CODE_SECTION_START@LED::setLedState@\n\n// TODO: Put your implementation to handle the\n// received server response here!\n\n// @USER_CODE_SECTION_END@LED::setLedState@\n</code></pre> <p>Attention</p> <p>If the tags are modified by the user the merge will not be ok and it may end up with the loss of some of the user code.</p> <p>Warning</p> <p>Modifying the name of a method in the fidl files will generate a different tag and, therefore, the merge will fail for that method.</p>"},{"location":"guide/code_generation.html#merge-operation","title":"Merge operation","text":"<p>Here are described the steps followed by Macchiato from the generation to the merge of the user code. Imagine we are calling Macchiato to generate the <code>LED</code> interface and to merge it with the contents in the folder <code>my_project/my_FP_Protocols</code>.</p> <ol> <li>First Macchiato will generate the source from the user fidl file as normally and save it in the <code>src-gen-c/LED</code> folder.</li> <li>Then it will look for the user files which should be located in <code>my_project/my_FP_Protocols/LED</code>.</li> <li>It will read the files there and keep the user code found between tags.</li> <li>Then merge the contents of the generated code in <code>src-gen-c/LED</code> with the code found in the tags.</li> <li>Overwrite the contents in <code>my_project/my_FP_Protocols/LED</code> with the merged new generation.</li> </ol> <p>If a tag is not anymore in the new generated code, it will not be in the new merged files.</p> <p>Attention</p> <p>Macchiato doesn't ask for confirmation when merging the content so it is advisable to keep a copy in a git repository or a backup of some kind.</p> <p>Macchiatto will expect to find the whole folder hierarchy in the user code path (i.e. LED/v1.0/FP_Common/FP_Helpers.h). Therefore, if you need to change the version of the interface you are generating, Macchiatto will not find the user code since it will be in the previous version folder.</p> <p>Tip</p> <p>If you update the interface version, you can trick macchiato into merging by renaming the old version folder to the new. Run macchiato with the merge option again to recover the usercode from the files.</p> <p>As an example, if we had the version v1.0 of the LED interface, and we are generating the version v1.1, we should rename our folder as <code>my_project/my_FP_Protocols/LED/v1.1/rest_of_subfolders</code>.</p>"},{"location":"guide/code_generation.html#how-to-call-the-merge","title":"How to call the merge","text":"<p>If you want to merge your user code with the new generated code you will need to add the <code>--merge</code> option. Like this:</p> <p><code>java -jar macchiato.jar --gen-c [my\\deployment\\model.fdepl] --merge path\\to\\my\\code</code></p> <p>You can call this directly from a command window within the macchiato folder like explained in the quickstart section.</p> <p>If you are using the Eclipse IDE for the generation, you will need to add the additional arguments to the External Tools Configuration. Open the confituration as shown in the picture below:</p> <p></p> <p>Then add the merge option and the path to the folder that contains the user code to the Generate C Code configuration and Apply the changes:</p> <p></p> <p>Running that configuration now should merge the C Code with your previous generated code, keeping the user additions within the tags.</p> <ol> <li> <p>Space Development Environmet is a different Endurosat product. Contact us for more information.\u00a0\u21a9</p> </li> <li> <p>It is important to use the given version with Macchiato, otherwise you could get unexpected behaviour or build errors.\u00a0\u21a9</p> </li> </ol>"},{"location":"guide/models.html","title":"Models","text":"<p>You will find some of the models we have defined so far in  <code>models</code> as examples for your generations.</p>"},{"location":"guide/models.html#interfaces","title":"Interfaces","text":"<p>Also known as FIDL files, they contain the definitions of the interface. We can define methods, types, version of the interface and many other things.</p> <p>Warning</p> <p>The version must be defined in the interface or the code generation will fail.</p> <pre><code>interface SimpleInterface {\nversion {major 1 minor 0}\n...\n}\n</code></pre>"},{"location":"guide/models.html#specifications","title":"Specifications","text":"<p>Here we define some rules or some characteristics that our deployment models might have. For the current version of Macchiato, we must specify if the interface is going to be implemented as a server or as a client.</p> <p>Warning</p> <p>Macchiato comes with a <code>BasicSpec</code> defined in the file \"BasicSpec.fdepl\" which values should not be erased. This specification must be defined for the generator to run.</p> <p>Important</p> <p>The generators use the contents defined in the specifications. To create a new one will not show any changes because the generator is already compiled without using the new specification.</p> <pre><code>// Some specifications...\n\nspecification BasicSpec {\nfor interfaces {\n// For the C Code generator to specify if the interface will be generated for a client or a server.\nIsClient : Boolean ( default: false ) ;\n// For the JS Generator, specify whether the target is going to be little endian or not.\nIsLittleEndian : Boolean ( default: true ) ;\n// Parameters for the DataCache generator\nDC_IO_DataTypesPackageName : String ( default: \"DataCacheTypes\" ) ;\nDC_IO_ProtocolID : Integer ( default: 136 ) ;\nGen_DataCache_Bindings : Boolean ( default: false ) ;\n}\n\nfor attributes {\n// Timeout parameter for the DataCache generator\nStatus_timeout : Integer ( default: 5000 ) ;\n}\n}\n\n// More specifications...\n</code></pre>"},{"location":"guide/models.html#deployments","title":"Deployments","text":"<p>The deployment definition will specify, for a certain interface, which specification applies. For example, we want to generate the code for an interface which is going to be used as a server, we must set <code>IsClient = false</code>.</p> <p>See the example below for more details.</p> <p>Tip</p> <p>If we give a default value for the specifications, we don't need to specify all the values for each of them in the deployment file. The generator will take the default value for them but we would still need to have the deployment model defined.</p>"},{"location":"guide/models.html#how-to-define-my-own-interfaces","title":"How to define my own interfaces","text":"<p>You can define your own interfaces using the Franca Language. You can write them from scratch or you can use the examples given within Macchiato's release.</p> <p>Tip</p> <p>Use the interface examples given within Macchiato to generate your own interfaces.</p> <p>As an example, the specification <code>IsClient</code> is defined for every interface to be <code>true</code> or <code>false</code>. If this is not define when trying to generate, we will find this error:</p> <pre><code>61   [main] ERROR .generators.macchiato.binders.Gen_C  - Error generating model user_deploy\\UserDeploy.fdepl: Cannot invoke \"java.lang.Boolean.booleanValue()\" because \"this.bClient\" is null\n</code></pre> <p><code>bClient</code> is an attribute in the generators which takes the value from that specification.</p>"},{"location":"guide/models.html#rules-to-be-respected-when-defining-your-own-interfaces","title":"Rules to be respected when defining your own interfaces","text":"<p>Due to the fact that the generated code will be part of the ESPS I, you have to make sure that you are following some rules and defining some necessary information in the interfaces and in the methods so the generated code can be properly integrated.</p> <p>1. Define the Protocol ID: ESPS I is using the IDs of the interface to redirect the received requests to the proper device and to be processed in the proper way. If the Protocol ID is not defined, the requests to that interface will not be processed. This is done by adding the following tag in the Interface description:</p> <pre><code>&lt;** @description: My brand new interface\n    @details: id = 7\n**&gt;\ninterface MyInterface\n{ /* Rest of the definition */ }\n</code></pre> <p>Important</p> <p>The Protocol ID must be held in a <code>uint16_t</code> value (for the C generation). This is, a value between 0 - 65535.</p> <p>2. Define the method ID: Similar to the Protocol ID, every method in the interface should have an ID. This will tell the ESPS I Stack how exactly process the request received. You need to include a simiarl tag before every method definition:</p> <pre><code>    &lt;** @description: A method to get a specific value from my device.\n@details: id = 0x00000000\n**&gt;\nmethod getSomeValueFromMyDevice\n{\n</code></pre> <p>3. Interfaces must contain a version: Franca gives the option to add a \"version\" when defining the interface. This is necessary for Macchiato to generate some of the output so if it is not defined in the interface, the generation will fail. This is how it should be defined:</p> <pre><code>interface MyInterface\n{\nversion { major 0 minor 1 }\n/* Rest of the interface */\n}\n</code></pre> <p>4. Do not modify the given deployment specifications: The specifications given with Macchiato (in <code>macchiato/modelsorg/endurosat/spec</code>) are match to generate the code using the java source within this specific version of Macchiato. If you modify the specifications, the macchiato.jar will not know how to parse it and it will not generate different code or, even worse, it might end up not generating anything.</p> <p>5. Indicate the size for Arrays, ByteBuffers and Strings: It is very important to add the size of the <code>array</code>, <code>ByteBuffer</code> or <code>String</code> types. Similar to the method id, the size of a variable can be defined using a comment:</p> <pre><code>    &lt;** @description: A method retrieving some arrays to my device\n@details: id = 0x00000055\n**&gt;\nmethod methodUsingArrays\n{\nin\n{\n&lt;** @description: An array of size 5\n@details: size = 5 **&gt;\nUInt16[] my_array\n}\nout\n{\n&lt;** @description: A string that may be as big as 19 characters\n@details: size = 10 **&gt;\nString my_string\n\n&lt;** @description: A byte buffer that can contain 25 bytes\n@details: size = 25 **&gt;\nByteBuffer my_buffer\n}\n}\n</code></pre> <p>Important</p> <p>The FP frame is limited to 246 bytes (excluding the header). This means the size of the in data and the out data, separately, cannot be bigger than that.</p> <p>There are some additional considerations when Macchiato generates the code for this types:</p> <ul> <li>An array will be defined as an array of the type and the indicated size. In the example, <code>my_array</code> will use 5 bytes in the FP frame.</li> <li>String and ByteBuffer will always add a field to specify the current size that is used to the generated struct. This means that to the descibred maximum size, we must take in account an extra <code>UInt8</code>. From the example, <code>my_string</code> will use 11 bytes and <code>my_buffer</code> 26 of the total.</li> <li>An extra considerations for String types, the FP generated code will write a null (<code>\\0</code>) character to the end of the used bytes. This means that if the maximum size for a String type is 10, the usable size is actually 9.</li> <li>Additionally, for String and ByteBuffer types, if we try to send a bigger amount of bytes than the maximum length defined, the data will be truncated to fit the ByteBuffer field.</li> </ul>"},{"location":"guide/models.html#example-of-user-defined-deployment","title":"Example of user defined deployment","text":"<p>For this example, lets consider the following directory structure: <pre><code>macchiato\n\u251c\u2500\u2500\u2500macchiato.jar\n\u251c\u2500\u2500\u2500jre\n\u251c\u2500\u2500\u2500models\n\u2502   \u2514\u2500\u2500\u2500org\n\u2502       \u2514\u2500\u2500\u2500endurosat\n\u2502           \u251c\u2500\u2500\u2500interfaces\n\u2502           \u251c\u2500\u2500\u2500deploy\n\u2502           \u2514\u2500\u2500\u2500spec\n\u2502               \u2514\u2500\u2500\u2500BasicSpec.fdepl\n\u2514\u2500\u2500\u2500user_deploy\n    \u251c\u2500\u2500\u2500user_deploy.fdepl\n    \u2514\u2500\u2500\u2500user_interface.fidl\n</code></pre></p> <p>We can define an Interface called <code>SimpleInterface</code> in the file <code>user_interface.fidl</code> like</p> <pre><code>package userdeploy\n\n&lt;** @description : Simple example interface.\n    @details: id = 7\n**&gt;\ninterface SimpleInterface {\nversion { major 1 minor 0}\n\n&lt;** @description: info about my structure **&gt;\nstruct SomeStruct {\n&lt;** @description: comment about this particular field  @details: size = 11 **&gt;\nString f1\n&lt;** @description: and about this other field @details: size = 22 **&gt;\nString f2\n}\n\n&lt;** @description: Another struct with a size and a data buffer **&gt;\nstruct StructA {\nUInt8 size\n&lt;** @details: size = 123 **&gt;\nUInt8[] buffer }\n\n&lt;** @description: Define an array type called StringArray @details: size = 2 **&gt;\narray StringArray of String\n\n&lt;** @description: StructB using the previosly defined type StringArray **&gt;\nstruct StructB { StringArray field }\n\n&lt;** @description: A method to get a specific value from my device.\n@details: id = 0x00000000\n**&gt;\nmethod m1 {\nin {\n&lt;** @description: more information about arg1 **&gt;\nString arg1\n&lt;** @description: maybe a warning about arg2 **&gt;\nSomeStruct arg2\n}\nout {\n&lt;** @description: output of my method m1 **&gt;\nStructB out1\n}\n}\n}\n</code></pre> <p>We have to use the specification given with macchiato in the folder <code>macchiato/models/org/endurosat/spec/BasicSpec.fdepl</code>  which will be called from the deployment file. Not all the generators care for all of  the atributes defined in the specification. Also, any attribute that is not define will  take the \"default\" value defined in the specification. </p> <p>Important</p> <p>The macchiato.jar is ready to use the attributes defined in the specification BasicSpec.fdepl, the generation will fail if they are not defined. Also, any new attribute in a custom specification will not be taken in account. See the FAQ for more information. </p> <p>And finally, a deployment definition in the file <code>user_deploy.fdepl</code>, that calls both:</p> <pre><code>package userdeploy\n\n// import the deployment specification from Macchiato\nimport \"../models/org/endurosat/spec/BasicSpec.fdepl\"\n\n// import the actual Franca interfaces we want to deploy\nimport \"user_interface.fidl\"\n\n/**\n* One example deployment of SimpleInterface according to specification BasicSpec.\n*/\n\ndefine org.endurosat.spec.BasicSpec for interface userdeploy.SimpleInterface\n{\nIsClient = true\n}\n</code></pre> <p>We would generate the code in C for this interface as follows:</p> <p><code>jre/bin/java.exe -jar macchiato.jar --gen-c user_deploy/user_deploy.fdepl</code></p> <p>And we can find the output in the folder src-gen-c.</p>"},{"location":"guide/output_c.html","title":"Generated Output for the C generator","text":"<p>The C generator is creating the source files necessary to interact with the ESPS I Stack implementation. The code could be integrated with, for example, the EnduroSat's OBC Starter Kit out of the box. But it can also be used with any module programmed in C that uses the ESPS I Stack library.</p>"},{"location":"guide/output_c.html#file-structure","title":"File structure","text":"<p>The FP layer implementation is divided into logical groups of files as explained in the table below (ProtocolName shall be replaced with the respective interface name as given in the Franca IDL description):</p> Package File name Description Client app ProtocolNameClientApp.c FP wrapper where the client code has to be implemented by the end user Server app ProtocolNameServerApp.c FP wrapper where the server code has to be implemented by the end user Client-side ProtocolNameProtocolClient.c Fully generated client-side implementation of the protocol:<ul><li>provides high-level request methods</li><li>supports a notification mechanism to the client app when a request has been responded by the server or in case of server error</li></ul> ProtocolNameProtocolClient.h Client-side header file included by the client app Server-side ProtocolNameProtocolServer.c Fully generated server-side implementation of the protocol:<ul><li>provides high-level response send methods</li><li>supports a notification mechanism to the server app when a request has been received from a client</li></ul> ProtocolNameProtocolServer.h Server-side header file included by the server app ProtocolServerCommon.c Common functions shared between all the servers in the system (currently contains a method to send standardized error frames in case of failed function verification) ProtocolServerCommon.h A header files with public common server functions Protocol-specific headers ProtocolNameProtocolTypes.h Contains the definitions of all protocol-specific types shared between client and server protocol implementations Common protocol headers BaseProtocolTypes.h Contains the definitions of common types shared between client and server protocol implementations <p>This diagram shows an overview of the file dependencies in the generated output:</p> <p></p>"},{"location":"guide/output_c.html#class-diagram","title":"Class diagram","text":"<p>The code generation uses Xtend templates written for the C language but the produced output follows an initial design described below on a high level.</p> <p>For this Interface example:</p> <pre><code>package myInterfaces\n\n&lt;** @description: LED control interface - provides operations to control and query LED states\n    @details: id = 77\n**&gt;\ninterface LED\n{\n    version { major 0 minor 1 }\n\n    &lt;** @description: Supported LED states **&gt;\n    enumeration LedState\n    {\n        OFF,\n        ON,\n        BLINKING\n    }\n\n    &lt;** @description: Supported error status codes **&gt;\n    enumeration ErrorStatus\n    {\n        SUCCESS,\n        FAILURE\n    }\n\n    &lt;** @description: The function allows changing the state of an LED.\n        @details: id = 0x00000000\n    **&gt;\n    method setLedState {\n        in {\n            &lt;** @description: LED identifier **&gt;\n            UInt8 ledId\n            &lt;** @description: Requested state of the LED **&gt;\n            LedState newState\n        }\n        out {\n            &lt;** @description: Indicates whether the LED state setting was applied successfully **&gt;\n            ErrorStatus status\n        }\n    }\n}\n</code></pre> <p>We will obtain the following class dependencies:</p> <p></p> Class Responsibility LEDClientApp <ul><li>registers the client APIs for the corresponding LED client interface to the FP layer</li><li>provides the client-side user implementation for the LED function protocol</li></ul> LEDProtocolClient <ul><li>registers the protocol handler to the underlying ESSA stack</li><li>handles the client-side serialization/deserialization of the LED function protocol</li><li>forwards clients requests to the stack after producing a valid FP frame</li><li>invokes user-provided response callbacks when the remote server responds</li></ul> LEDProtocolServer <ul><li>registers the protocol handler to the underlying ESSA stack</li><li>handles the server-side serialization/deserialization of the LED function protocol</li><li>forwards server responses to the stack after producing a valid FP frame</li><li>responds immediately with an error frame when the requested function id is not supported</li><li>invokes user-provided request callbacks when a client request is received</li></ul> LEDServerApp <ul><li>registers the server APIs for the corresponding LED server interface to the FP layer</li><li>provides the server-side user implementation for the LED function protocol</li></ul> ProtocolServerCommon <ul><li>For the moment, this class provides the possibility to send error frames for an unsupported function ID; this is something every server would need to support and it is preferrable that this code is shared</li><li>It will contains other common operations in the future</li></ul>"},{"location":"guide/output_c.html#sequence-diagrams","title":"Sequence diagrams","text":"<p>The diagrams below represent the sequence of sending and receiving messages to and from the ESPS I.</p> <p>Note</p> <p>There are references to the ESSA_Stack in the diagram. This is just a deprecated name for the ESPS I Stack. They are equivalent.</p> <p>Client-side: </p> <p>Server-side: </p>"},{"location":"guide/output_js.html","title":"Generated Output for the Java Script generator","text":"<p>The generated files are meant to be used with the Space Development Environment. A GUI developed by EnduroSat to interact with modules using the ESPS I Stack.</p>"},{"location":"guide/output_js.html#file-structure","title":"File structure","text":"<p>Note</p> <p>For the current version of Macchiato there is no server implementation for the JavaScript generator.</p> <p>The product of the code generator currently maps to the following set of files:</p> File name Description ProtocolNameClientApp.js API for the interface, serialize and deserialize functions ProtocolNameClientAppGui.json Configuration file, description of the GUI for SDE1 <p>The diagram below shows the file dependencies of the generated output.</p> <p></p> <p>For more information about SDE and how you can benefit from using it, contact our support team.</p> <ol> <li> <p>Space Development Environment is a tool developed by Endurosat as a GUI for interfacing with the different satelite modules. It supports mission control and local testing configurations.\u00a0\u21a9</p> </li> </ol>"},{"location":"guide/output_py.html","title":"Generated Output for the Python generator","text":"<p>The code generated in python is meant to be used in a GUI developed by EnduroSat. Still, the files generated could be used in any python application that needs to interact with another device that uses the same interface.</p> <p>Important</p> <p>The mentioned EnduroSat's GUI is now migrated to a JavaScript application known as the Space Development Environment or SDE.</p>"},{"location":"guide/output_py.html#file-structure","title":"File structure","text":"<p>Note</p> <p>For the current version of Macchiato there is no server implementation for the Python generator.</p> <p>The product of the code generator currently maps to the following set of files:</p> File name Description ProtocolNameClientApp.py Python API module ProtocolNameClientAppGui.yaml Interface description for use with EnduroSat legacy GUI GuiHelpers.py Legacy GUI helpers SerDesHelpers.py Common functions to take care of the serialization/deserialization of the user interface <p>The diagram below shows the file dependencies of the generated output.</p> <p></p> <p>For more information on testing your interfaces with Python, contact our support team.</p>"}]}